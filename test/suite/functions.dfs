
##test: Function expressions

    def add = (a, b) {
        return a + b
    }
    
    eq(add(3, 4), 7)
    
##test: Function definition

    def div(a, b) {
        return a // b
    }
    
    eq(div(8, 4), 2)

##test: Function hoisting
    eq(minu(8, 5), 3)

    def minu(a, b) {
        return a - b
    }

    if true do
    	eq(minu(77, 11), 67)

    	def minu(a, b) {
    		return a - b + 1
    	}

    eq(minu(4, 3), 1)

##test: Generator functions
	def i := 0
	def arr = []
	def truth = [0, 1, 1, 2, 3]
	def fibonacci() * {
		def [a, b] := [0, 1]
		while true do
			yield a
			[a, b] = [b, a + b]
	}

	def gen = fibonacci()

	while i < 5 do
		def {value} = gen.next()
		eq(truth[i], value)
		i = i + 1

##test: Generator methods
	def i := 0
	def truth = [0, 1, 1, 2]
	def obj = {
		iterations: 4
		fibonacci() * {
			def [a, b] := [0, 1]
			def i := 0
			while i < @iterations do
				yield a
				[a, b] = [b, a + b]
				i = i + 1
		}
	}

	def arr = Array.from(obj.fibonacci())

	eq(arr.length, 4)

	while i < 4 do
		eq(truth[i], arr[i])
		i = i + 1

##test: This binding
	def obj1 = {
		prop: 4

		fetch() {
			def get3() {
				return [@prop * 1, @prop * 2, @prop * 3]
			}

			return get3
		}

		get2() {
			return [@prop * 1, @prop * 2]
		}
	}

	def obj2 = {
		prop: 2,
		get3: obj1.fetch(),
		get2: obj1.get2
	}

	arrayEq(obj2.get3(), [4, 8, 12])
	arrayEq(obj2.get2(), [4, 8])

##test: Explicit this binding
	def obj1 = {
		prop: 4
		
		fetch() {
			def get3() -> {
				return [@prop * 1, @prop * 2, @prop * 3]
			}

			return get3
		}

		get2() {
			def obj = {
				prop: 3
				fn() => {
					# should be bound to "prop: 4"
					return [@prop * 1, @prop * 2]
				}
			}

			return obj.fn()
		}
	}

	def obj2 = {
		prop: 2
		get3: obj1.fetch()
	}

	arrayEq(obj1.get2(), [4, 8])
	arrayEq(obj2.get3(), [2, 4, 6])


##test: Generator this binding
	def obj1 = {
		prop: 4
		fetch() {
			def get3() * {
				yield @prop * 1
				yield @prop * 2
				yield @prop * 3
			}

			return get3
		}
		get2() * {
			yield @prop * 1
			yield @prop * 2
		}
	}

	def obj2 = {
		prop: 2,
		get3: obj1.fetch(),
		get2: obj1.get2
	}

	arrayEq(Array.from(obj2.get3()), [4, 8, 12])
	arrayEq(Array.from(obj2.get2()), [4, 8])
